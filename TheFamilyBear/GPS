#include <WiFi.h>
#include <HTTPClient.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>
#include <math.h> // for cos(), radians()

// WiFi credentials
#define WIFI_SSID "TLU"
#define WIFI_PASSWORD ""

// Firebase Realtime Database URL
#define FIREBASE_URL "https://familybear-ab556-default-rtdb.europe-west1.firebasedatabase.app/status/gps.json"

// GPS module on UART1
HardwareSerial SerialGPS(1);
#define GPS_RX 6  // GPS TX --> ESP32 RX1 (GPIO6)
#define GPS_TX 7  // GPS RX --> ESP32 TX1 (GPIO7)

TinyGPSPlus gps;

// Safe zone center
const double SAFE_LAT = 59.438940;
const double SAFE_LNG = 24.772575;
const double SAFE_RADIUS_METERS = 50.0;

// Simulation control
bool simulateGPS = false;
bool simulateInside = false;

void setup() {
  Serial.begin(115200);
  SerialGPS.begin(9600, SERIAL_8N1, GPS_RX, GPS_TX);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  Serial.println("GPS Safe Zone Monitor Initialized");
  Serial.println("Waiting for GPS signal...");

  Serial.println("Type 'inside' or 'outside' to simulate GPS location.");
  Serial.println("Type 'real' to use real GPS data.");
}

void loop() {
  static unsigned long lastUpdate = 0;
  static unsigned long lastAlert = 0;
  static unsigned long lastFallbackSent = 0;

  // Check for serial command
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();
    if (cmd.equalsIgnoreCase("inside")) {
      simulateGPS = true;
      simulateInside = true;
      Serial.println("‚úÖ Simulation: INSIDE safe zone");
    } else if (cmd.equalsIgnoreCase("outside")) {
      simulateGPS = true;
      simulateInside = false;
      Serial.println("‚úÖ Simulation: OUTSIDE safe zone");
    } else if (cmd.equalsIgnoreCase("real")) {
      simulateGPS = false;
      Serial.println("‚úÖ Switched to REAL GPS data");
    }
  }

  double lat = 0.0, lng = 0.0;
  bool insideGeofence = false;

  // Calculate longitude offset for ~55 meters outside safe zone
  double meters_per_degree_lon = 111320 * cos(radians(SAFE_LAT));
  double offset_lon = 55.0 / meters_per_degree_lon;

  // Simulation mode
  if (simulateGPS) {
    if (simulateInside) {
      lat = SAFE_LAT;
      lng = SAFE_LNG;
    } else {
      // About 55 meters east (outside the safe zone)
      lat = SAFE_LAT;
      lng = SAFE_LNG + offset_lon;
    }
    double distance = TinyGPSPlus::distanceBetween(lat, lng, SAFE_LAT, SAFE_LNG);
    insideGeofence = distance <= SAFE_RADIUS_METERS;

    Serial.println("üìç Simulated location:");
    Serial.print("Lat: "); Serial.println(lat, 6);
    Serial.print("Lng: "); Serial.println(lng, 6);
    Serial.print("Distance from safe zone: "); Serial.print(distance, 2); Serial.println(" meters");
    Serial.print("Geofence status: "); Serial.println(insideGeofence ? "Inside" : "Outside");

  } else {
    // Real GPS data
    while (SerialGPS.available() > 0) {
      gps.encode(SerialGPS.read());
    }

    if (gps.location.isValid() && gps.location.isUpdated()) {
      if (millis() - lastUpdate > 2000) {
        lastUpdate = millis();

        lat = gps.location.lat();
        lng = gps.location.lng();
        double distance = TinyGPSPlus::distanceBetween(lat, lng, SAFE_LAT, SAFE_LNG);
        insideGeofence = distance <= SAFE_RADIUS_METERS;

        Serial.println("üì° Real GPS location:");
        Serial.print("Lat: "); Serial.println(lat, 6);
        Serial.print("Lng: "); Serial.println(lng, 6);
        Serial.print("Distance from safe zone: "); Serial.print(distance, 2); Serial.println(" meters");
        Serial.print("Geofence status: "); Serial.println(insideGeofence ? "Inside" : "Outside");
      }
    } else if (millis() - lastUpdate > 5000 && millis() - lastFallbackSent > 30000) {
      lastUpdate = millis();
      lastFallbackSent = millis();

      Serial.println("‚ö†Ô∏è No valid GPS data. Sending geofence: false as fallback");

      String fallbackPayload = "{\"geofence\": false}";
      if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(FIREBASE_URL);
        http.addHeader("Content-Type", "application/json");
        int httpResponseCode = http.PUT(fallbackPayload);
        Serial.print("Fallback Firebase response: ");
        Serial.println(httpResponseCode);
        http.end();
      }
      return;
    }
  }

  // Send data to Firebase
  if (millis() - lastUpdate > 2000 && (simulateGPS || gps.location.isValid())) {
    lastUpdate = millis();

    String payload = "{";
    payload += "\"geofence\": " + String(insideGeofence ? "true" : "false");
    payload += ",";
    payload += "\"latitude\": " + String(lat, 6);
    payload += ",";
    payload += "\"longitude\": " + String(lng, 6);
    payload += "}";

    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      http.begin(FIREBASE_URL);
      http.addHeader("Content-Type", "application/json");
      int httpResponseCode = http.PUT(payload);
      Serial.print("üì§ Firebase response: ");
      Serial.println(httpResponseCode);
      http.end();
    } else {
      Serial.println("üì∂ WiFi disconnected. Reconnecting...");
      WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    }
  }

  // Alert if no satellites (real mode only)
  if (!simulateGPS && millis() - lastAlert > 5000) {
    lastAlert = millis();
    if (gps.satellites.value() == 0) {
      Serial.println("‚ö†Ô∏è NO SATELLITES DETECTED - check GPS module & antenna");
    }
  }

  delay(5000); // For easier serial monitor reading
}

